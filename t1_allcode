import math
import os
import csv
import tkinter
from tkinter import*
import tkinter.messagebox as tkmb
import matplotlib.pyplot as plt
from matplotlib.figure import Figure 
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg, 
NavigationToolbar2Tk)  
import numpy as np
import pandas as pd
from matplotlib import cm
import pandas.plotting
pd.set_option('display.max_columns', None) 
pd.set_option('display.max_rows', None) 
plt.rcParams['font.sans-serif']=['SimHei'] #用来正常显示中文标签
plt.rcParams['axes.unicode_minus']=False #用来正常显示负号
#####################################################################
#1.获得Dataframe格式的文件
tail=['']
path=['']#迫于不会操作，设了两个全局变量
def path_get(name):#path是代码所在的路径，name是带后缀的文件名字,返回值是文件的可用路径，限win10
    #限win10的原因是，
    path=os.path.dirname(os.path.realpath(__file__))
    ret=path.split('\\')
    ret.append(name)
    ret='/'.join(ret)
    return ret

def initial():
    if tail[0]=='.csv':ret=csv_initial()
    elif tail[0]=='.json':ret=json_initial()
    elif tail[0]=='.xls':ret=excel_initial()
    return ret

def csv_initial():#将文件导入成为Dataframe格式，并返回
    file=pd.read_csv(path[0],encoding='gbk',engine='c')
    return file

def json_initial():
    file=pd.read_json(path[0])
    return file

def excel_initial():
    file=pd.read_excel(path[0])
    return file


def getcolor(num):
    color=[cm.gist_ncar(i) for i in np.linspace(0, 1, num)]#取色盘
    return color

def getname():#第一个界面用来获得文件名和后缀
    name=''
    def confirm(x):
        tail[0]=x
    def check(namein):
        isdes=0
        name=namein.get()
        name+=tail[0]
        path[0]=path_get(name)
        if tail=='':
            tkmb.showinfo(title='错误',message='请选择后缀',icon='error')
        elif os.path.exists(path[0]):#判断文件是否存在
            isdes=1
        else:
            tkmb.showinfo(title='文件名或后缀错误',message='文件不存在',icon='error')
        if isdes==1:
            win1.destroy()
    win1=Tk()
    win1.geometry('300x150')
    win1.title('选择文件')
    lname=Label(win1,text='文件名（无后缀）')
    lspace=Label(win1,text='选择后缀')
    namein=Entry(win1,width=10)
    bcsv=Button(win1,text='.csv格式',command=lambda:confirm('.csv'))
    bjson=Button(win1,text='.json格式',command=lambda:confirm('.json'))
    bxls=Button(win1,text='.xls格式',command=lambda:confirm('.xls'))
    bconfirrm=Button(win1,text='确定',command=lambda:check(namein))
    lname.grid(row=1,column=1)
    namein.grid(row=1,column=2)
    lspace.grid(row=2,column=2)
    bcsv.grid(row=3,column=1)
    bxls.grid(row=3,column=2)
    bjson.grid(row=3,column=3)
    bconfirrm.grid(row=4,column=2)
    win1.mainloop()

#########################################################################
#2.获得想要的定制要求
request={'ifanx':0,#是否分析第一列
         'iflinechart':0,#是否绘制折线
         'ifbar':0,#条状
         'ifxlabel':0,#本身是用第一列的四个点当x轴标签，未实现
         'color':0,#颜色，还是最好别用
         'title':0,#图标题
         'save':False,#是否保存
         'savename':''
    }
def change_request(x):
    request[x]=1

def get_request(file):
    def finalcheck(b_color,b_title):
        request['color']=b_color.get()
        request['title']=b_title.get()
        request['ifanx']=ifanx.get()
        request['iflinechart']=iflinechart.get()
        request['ifbar']=iflinebar.get()
        #request['ifxlabel']=ifxlabel.get()
        win2.destroy()
    win2=Tk()   
    ifanx = tkinter.BooleanVar()
    iflinechart = tkinter.BooleanVar()
    iflinebar = tkinter.BooleanVar()
    ifxlabel = tkinter.BooleanVar()
    win2.geometry('600x150')
    win2.title('客制化（bushi')
    b_ifanx=Checkbutton(win2,text='是否对%s进行数值分析？'%file.columns[0],variable=ifanx)
    b_iflinechart=Checkbutton(win2,text='是否绘制折线图?',variable=iflinechart)
    b_iflinebar=Checkbutton(win2,text='是否绘制柱状图？',variable=iflinebar)
    #b_ifxlabel=Checkbutton(win2,text='是否用%s做x轴（十分不推荐）'%file.columns[0],variable=ifxlabel)
    b_color=Entry(width=15)
    b_title=Entry(width=15)
    l_color=Label(text='输颜色（不输或输错就是作者随机的）')
    l_title=Label(text='输图标题（默认为空）')
    l_color.grid(row=3,column=5)
    l_title.grid(row=4,column=5)
    b_ifanx.grid(row=3,column=3)
    b_iflinechart.grid(row=4,column=3)
    b_iflinebar.grid(row=5,column=3)
    b_color.grid(row=3,column=6)
    b_title.grid(row=4,column=6)
    #b_ifxlabel.grid(row=5,column=5)
    finish=Button(text='确定',command=lambda:finalcheck(b_color,b_title))
    finish.grid(row=7,column=4)
    win2.mainloop()

##############################################################################
#3.根据request进行数据处理和画图
def anandraw(request,file):#全称是analyse and draw,但是可以写成ana and draw,即anandraw(冷笑话
    if request['ifanx']:
        ana=file.describe()
    else:
        ana=file[file.columns[1:]].describe()
    def exit():
        win3.destroy()
    
    def confirmsave(e_savename):
        request['save']=True
        toolname=e_savename.get()
        p=os.path.dirname(os.path.realpath(__file__))
        ret=p.split('\\')
        ret.append(toolname)
        request['savename']='/'.join(ret)
        figure1=plt.figure()
        ax3=figure1.add_subplot(121)
        ax4=figure1.add_subplot(122)
        file.describe().iloc[[3,4,5,6,7]].plot.bar(ax=ax3)
        file.iloc[:,[i for i in range(1,len(file.columns.to_numpy()))]].plot.line(ax=ax4)
        if os.path.exists(request['savename']+'.png'):
            tkmb.showinfo(title='emm',message='已经有了该名字的文件',icon='error')
        else:
            ax3.figure.savefig(request['savename']+'.png')
            tkmb.showinfo(title='牛',message='保存成功！',icon='info')
    def drawpic(request,file):
        win4=Tk()
        def exit():
            win4.destroy()
        b_exit=Button(win4,text='退出',command=lambda:exit())
        b_exit.pack()
        win4.title('预览图')
        b_save=Button(win4,text='保存',command=lambda:confirmsave(e_savename))
        e_savename=Entry(win4,width=15)
        l_savename=Label(win4,text='请输入要保存的文件名（有且只有png）')
        b_save.pack()
        e_savename.pack()
        l_savename.pack()
        anainfo=file.describe()
        if request['ifanx']:
            anainfo=anainfo.iloc[[3,4,5,6,7]]
            
        else:
            anainfo=anainfo.iloc[[3,4,5,6,7],[i for i in range(1,len(anainfo.columns.to_numpy()))]]#这句大问题
            file=file.iloc[:,[i for i in range(1,len(anainfo.columns.to_numpy()))]]
        
        if request['ifbar']:
            figure_bar=plt.Figure(figsize=(6,5),dpi=100)
            ax1=figure_bar.add_subplot(111)
            bar1=FigureCanvasTkAgg(figure_bar,win4)
            bar1.get_tk_widget().pack(side=tkinter.LEFT,fill=tkinter.BOTH)
            ax1.set_title(request['title'])
            
            try:
                anainfo.plot.bar(color=request['color'],ax=ax1)
            except:
                anainfo.plot.bar(ax=ax1)
            
        if request['iflinechart']:
            figure_linechart=plt.Figure(figsize=(6,5),dpi=100)
            ax2=figure_linechart.add_subplot(111)
            line1=FigureCanvasTkAgg(figure_linechart,win4)
            line1.get_tk_widget().pack(side=tkinter.LEFT,fill=tkinter.BOTH)
            ax2.set_title(request['title'])
            try:
                file.plot.line(color=request['color'],ax=ax2)
            except:
                file.plot.line(ax=ax2)
        

        win4.mainloop()

    pd.set_option('display.width',500)
    pd.set_option('display.unicode.ambiguous_as_wide', True)
    pd.set_option('display.unicode.east_asian_width', True)
    ana=str(ana)
    win3=Tk()
    win3.geometry('1000x200')
    analyse=Text(win3,height=9,width=500)
    analyse.insert('insert',ana)
    l_anlyse=Label(win3,text='数据总结')
    b_exit=Button(win3,text='退出',command=lambda:exit())
    b_draw=Button(win3,text='绘图',command=lambda:drawpic(request,file))
    
    l_anlyse.pack()
    analyse.pack()
    b_draw.pack()
    
    b_exit.pack()
    win3.mainloop()
    
def main():
    getname()
    file=initial()
    get_request(file)
    anandraw(request,file)
main()
